# GitLab CI/CD Pipeline
# Replica√ß√£o da pipeline GitHub Actions para GitLab

# Vari√°veis globais
variables:
  NODE_VERSION: "20"

# Stages (etapas em sequ√™ncia)
stages:
  - validate # Valida√ß√£o de qualidade (paralelo)
  - build # Constru√ß√£o do projeto
  - deploy # Deploy (apenas master)
  - performance # Lighthouse CI (ap√≥s deploy)

# Cache global para node_modules
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Template para jobs Node.js
.node_template: &node_template
  image: node:${NODE_VERSION}
  before_script:
    - npm ci

# ========================================
# STAGE 1: VALIDATE (jobs em paralelo)
# ========================================

prettier-check:
  <<: *node_template
  stage: validate
  script:
    - npx prettier --check .

eslint-check:
  <<: *node_template
  stage: validate
  script:
    - npx eslint .
  allow_failure: true # Permite warnings sem falhar

tests:
  <<: *node_template
  stage: validate
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - coverage/
    expire_in: 30 days
    reports:
      junit: coverage/junit.xml

# ========================================
# STAGE 2: BUILD (depende do validate) TESTE
# ========================================

build:
  <<: *node_template
  stage: build
  script:
    - echo "Debug - Space ID is $CONTENTFUL_SPACE_ID"
    - echo "Debug - Access Token length is $(echo $CONTENTFUL_ACCESS_TOKEN | wc -c)"
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 hour
  only:
    - branches

# ========================================
# STAGE 3: DEPLOY (apenas master)
# ========================================

deploy:
  <<: *node_template
  stage: deploy
  script:
    - npm install -g netlify-cli
    - netlify deploy --prod --dir=.next --message="Deploy from GitLab CI - $CI_COMMIT_SHA"
  after_script:
    - |
      if [ "$CI_JOB_STATUS" == "success" ]; then
        curl -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "‚úÖ GitLab Deploy Successful",
              "description": "Website deployed to production from GitLab",
              "color": 3066993,
              "fields": [
                {"name": "Project", "value": "'"$CI_PROJECT_PATH"'", "inline": true},
                {"name": "Branch", "value": "'"$CI_COMMIT_REF_NAME"'", "inline": true},
                {"name": "Commit", "value": "`'"${CI_COMMIT_SHA:0:8}"'`", "inline": false},
                {"name": "Author", "value": "'"$CI_COMMIT_AUTHOR"'", "inline": true},
                {"name": "Deploy URL", "value": "https://tdw-mp1-henrique-policarpo.netlify.app", "inline": false}
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }' \
          $DISCORD_WEBHOOK_URL
      else
        curl -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "‚ùå GitLab Deploy Failed",
              "description": "Deployment to production failed",
              "color": 15158332,
              "fields": [
                {"name": "Project", "value": "'"$CI_PROJECT_PATH"'", "inline": true},
                {"name": "Branch", "value": "'"$CI_COMMIT_REF_NAME"'", "inline": true},
                {"name": "Commit", "value": "`'"${CI_COMMIT_SHA:0:8}"'`", "inline": false},
                {"name": "Logs", "value": "[View Logs]('"$CI_JOB_URL"')", "inline": false}
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }' \
          $DISCORD_WEBHOOK_URL
      fi
  environment:
    name: production
    url: https://tdw-mp1-henrique-policarpo.netlify.app
  only:
    - master # Apenas na branch default
  when: on_success # Apenas se build passou

# ========================================
# STAGE 4: PERFORMANCE (Lighthouse CI)
# ========================================

lighthouse:
  image: node:${NODE_VERSION}
  stage: performance
  before_script:
    # Instalar Chrome/Chromium e depend√™ncias necess√°rias
    - apt-get update
    - apt-get install -y wget gnupg
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
    - apt-get update
    - apt-get install -y google-chrome-stable --no-install-recommends
    - rm -rf /var/lib/apt/lists/*
    # Instalar depend√™ncias npm
    - npm ci
  script:
    - npm run lighthouse
  after_script:
    - |
      if [ "$CI_JOB_STATUS" == "success" ]; then
        curl -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "üîç GitLab Lighthouse Analysis Complete",
              "description": "Performance analysis finished successfully",
              "color": 3447003,
              "fields": [
                {"name": "Project", "value": "'"$CI_PROJECT_PATH"'", "inline": true},
                {"name": "Branch", "value": "'"$CI_COMMIT_REF_NAME"'", "inline": true},
                {"name": "Website", "value": "https://tdw-mp1-henrique-policarpo.netlify.app", "inline": false},
                {"name": "Results", "value": "[View Artifacts]('"$CI_JOB_URL"'/artifacts/browse/.lighthouseci/)", "inline": false}
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }' \
          $DISCORD_WEBHOOK_URL
      else
        curl -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "‚ö†Ô∏è GitLab Lighthouse Failed",
              "description": "Performance analysis did not meet thresholds",
              "color": 15105570,
              "fields": [
                {"name": "Project", "value": "'"$CI_PROJECT_PATH"'", "inline": true},
                {"name": "Branch", "value": "'"$CI_COMMIT_REF_NAME"'", "inline": true},
                {"name": "Logs", "value": "[View Logs]('"$CI_JOB_URL"')", "inline": false}
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
            }]
          }' \
          $DISCORD_WEBHOOK_URL
      fi
  artifacts:
    when: always
    paths:
      - .lighthouseci/
    expire_in: 30 days
  only:
    - master
  when: on_success
# ========================================
# NOTAS SOBRE TRIGGERS
# ========================================

# Este ficheiro .gitlab-ci.yml configura os seguintes triggers:
#
# 1. COMMITS: Autom√°tico em qualquer push (configurado por padr√£o)
#
# 2. WEBHOOK DO CONTENTFUL:
#    - Configure em GitLab: Settings > Webhooks
#    - URL: https://gitlab.com/api/v4/projects/PROJECT_ID/trigger/pipeline
#    - Token: Criar em Settings > CI/CD > Pipeline triggers
#
# 3. SCHEDULE (00:00 dias da semana):
#    - Configure em GitLab: CI/CD > Schedules > New schedule
#    - Interval pattern: 0 0 * * 1-5
#    - Target branch: master
#    - ATEN√á√ÉO: Desligar depois de validar!
